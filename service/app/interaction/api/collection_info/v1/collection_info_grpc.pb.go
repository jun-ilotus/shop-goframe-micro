// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: collection_info/v1/collection_info.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CollectionInfo_GetList_FullMethodName = "/collection_info.v1.collection_info/GetList"
	CollectionInfo_Create_FullMethodName  = "/collection_info.v1.collection_info/Create"
	CollectionInfo_Delete_FullMethodName  = "/collection_info.v1.collection_info/Delete"
)

// CollectionInfoClient is the client API for CollectionInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionInfoClient interface {
	GetList(ctx context.Context, in *CollectionInfoGetListReq, opts ...grpc.CallOption) (*CollectionInfoGetListRes, error)
	Create(ctx context.Context, in *CollectionInfoCreateReq, opts ...grpc.CallOption) (*CollectionInfoCreateRes, error)
	Delete(ctx context.Context, in *CollectionInfoDeleteReq, opts ...grpc.CallOption) (*CollectionInfoDeleteRes, error)
}

type collectionInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionInfoClient(cc grpc.ClientConnInterface) CollectionInfoClient {
	return &collectionInfoClient{cc}
}

func (c *collectionInfoClient) GetList(ctx context.Context, in *CollectionInfoGetListReq, opts ...grpc.CallOption) (*CollectionInfoGetListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionInfoGetListRes)
	err := c.cc.Invoke(ctx, CollectionInfo_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionInfoClient) Create(ctx context.Context, in *CollectionInfoCreateReq, opts ...grpc.CallOption) (*CollectionInfoCreateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionInfoCreateRes)
	err := c.cc.Invoke(ctx, CollectionInfo_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionInfoClient) Delete(ctx context.Context, in *CollectionInfoDeleteReq, opts ...grpc.CallOption) (*CollectionInfoDeleteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionInfoDeleteRes)
	err := c.cc.Invoke(ctx, CollectionInfo_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionInfoServer is the server API for CollectionInfo service.
// All implementations must embed UnimplementedCollectionInfoServer
// for forward compatibility.
type CollectionInfoServer interface {
	GetList(context.Context, *CollectionInfoGetListReq) (*CollectionInfoGetListRes, error)
	Create(context.Context, *CollectionInfoCreateReq) (*CollectionInfoCreateRes, error)
	Delete(context.Context, *CollectionInfoDeleteReq) (*CollectionInfoDeleteRes, error)
	mustEmbedUnimplementedCollectionInfoServer()
}

// UnimplementedCollectionInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollectionInfoServer struct{}

func (UnimplementedCollectionInfoServer) GetList(context.Context, *CollectionInfoGetListReq) (*CollectionInfoGetListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedCollectionInfoServer) Create(context.Context, *CollectionInfoCreateReq) (*CollectionInfoCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCollectionInfoServer) Delete(context.Context, *CollectionInfoDeleteReq) (*CollectionInfoDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCollectionInfoServer) mustEmbedUnimplementedCollectionInfoServer() {}
func (UnimplementedCollectionInfoServer) testEmbeddedByValue()                        {}

// UnsafeCollectionInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionInfoServer will
// result in compilation errors.
type UnsafeCollectionInfoServer interface {
	mustEmbedUnimplementedCollectionInfoServer()
}

func RegisterCollectionInfoServer(s grpc.ServiceRegistrar, srv CollectionInfoServer) {
	// If the following call pancis, it indicates UnimplementedCollectionInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CollectionInfo_ServiceDesc, srv)
}

func _CollectionInfo_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionInfoGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionInfoServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionInfo_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionInfoServer).GetList(ctx, req.(*CollectionInfoGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionInfo_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionInfoCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionInfoServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionInfo_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionInfoServer).Create(ctx, req.(*CollectionInfoCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionInfo_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionInfoServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionInfo_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionInfoServer).Delete(ctx, req.(*CollectionInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectionInfo_ServiceDesc is the grpc.ServiceDesc for CollectionInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectionInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collection_info.v1.collection_info",
	HandlerType: (*CollectionInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _CollectionInfo_GetList_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CollectionInfo_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CollectionInfo_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collection_info/v1/collection_info.proto",
}
