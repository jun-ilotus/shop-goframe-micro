// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: praise_info/v1/praise_info.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PraiseInfo_GetList_FullMethodName = "/praise_info.v1.praise_info/GetList"
	PraiseInfo_Create_FullMethodName  = "/praise_info.v1.praise_info/Create"
	PraiseInfo_Delete_FullMethodName  = "/praise_info.v1.praise_info/Delete"
)

// PraiseInfoClient is the client API for PraiseInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PraiseInfoClient interface {
	GetList(ctx context.Context, in *PraiseInfoGetListReq, opts ...grpc.CallOption) (*PraiseInfoGetListRes, error)
	Create(ctx context.Context, in *PraiseInfoCreateReq, opts ...grpc.CallOption) (*PraiseInfoCreateRes, error)
	Delete(ctx context.Context, in *PraiseInfoDeleteReq, opts ...grpc.CallOption) (*PraiseInfoDeleteRes, error)
}

type praiseInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewPraiseInfoClient(cc grpc.ClientConnInterface) PraiseInfoClient {
	return &praiseInfoClient{cc}
}

func (c *praiseInfoClient) GetList(ctx context.Context, in *PraiseInfoGetListReq, opts ...grpc.CallOption) (*PraiseInfoGetListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PraiseInfoGetListRes)
	err := c.cc.Invoke(ctx, PraiseInfo_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *praiseInfoClient) Create(ctx context.Context, in *PraiseInfoCreateReq, opts ...grpc.CallOption) (*PraiseInfoCreateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PraiseInfoCreateRes)
	err := c.cc.Invoke(ctx, PraiseInfo_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *praiseInfoClient) Delete(ctx context.Context, in *PraiseInfoDeleteReq, opts ...grpc.CallOption) (*PraiseInfoDeleteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PraiseInfoDeleteRes)
	err := c.cc.Invoke(ctx, PraiseInfo_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PraiseInfoServer is the server API for PraiseInfo service.
// All implementations must embed UnimplementedPraiseInfoServer
// for forward compatibility.
type PraiseInfoServer interface {
	GetList(context.Context, *PraiseInfoGetListReq) (*PraiseInfoGetListRes, error)
	Create(context.Context, *PraiseInfoCreateReq) (*PraiseInfoCreateRes, error)
	Delete(context.Context, *PraiseInfoDeleteReq) (*PraiseInfoDeleteRes, error)
	mustEmbedUnimplementedPraiseInfoServer()
}

// UnimplementedPraiseInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPraiseInfoServer struct{}

func (UnimplementedPraiseInfoServer) GetList(context.Context, *PraiseInfoGetListReq) (*PraiseInfoGetListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedPraiseInfoServer) Create(context.Context, *PraiseInfoCreateReq) (*PraiseInfoCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPraiseInfoServer) Delete(context.Context, *PraiseInfoDeleteReq) (*PraiseInfoDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPraiseInfoServer) mustEmbedUnimplementedPraiseInfoServer() {}
func (UnimplementedPraiseInfoServer) testEmbeddedByValue()                    {}

// UnsafePraiseInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PraiseInfoServer will
// result in compilation errors.
type UnsafePraiseInfoServer interface {
	mustEmbedUnimplementedPraiseInfoServer()
}

func RegisterPraiseInfoServer(s grpc.ServiceRegistrar, srv PraiseInfoServer) {
	// If the following call pancis, it indicates UnimplementedPraiseInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PraiseInfo_ServiceDesc, srv)
}

func _PraiseInfo_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PraiseInfoGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PraiseInfoServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PraiseInfo_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PraiseInfoServer).GetList(ctx, req.(*PraiseInfoGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PraiseInfo_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PraiseInfoCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PraiseInfoServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PraiseInfo_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PraiseInfoServer).Create(ctx, req.(*PraiseInfoCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PraiseInfo_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PraiseInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PraiseInfoServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PraiseInfo_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PraiseInfoServer).Delete(ctx, req.(*PraiseInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PraiseInfo_ServiceDesc is the grpc.ServiceDesc for PraiseInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PraiseInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "praise_info.v1.praise_info",
	HandlerType: (*PraiseInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _PraiseInfo_GetList_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PraiseInfo_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PraiseInfo_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "praise_info/v1/praise_info.proto",
}
