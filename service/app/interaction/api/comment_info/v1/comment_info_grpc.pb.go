// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: comment_info/v1/comment_info.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommentInfo_GetList_FullMethodName = "/comment_info.v1.comment_info/GetList"
	CommentInfo_Create_FullMethodName  = "/comment_info.v1.comment_info/Create"
	CommentInfo_Delete_FullMethodName  = "/comment_info.v1.comment_info/Delete"
)

// CommentInfoClient is the client API for CommentInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentInfoClient interface {
	GetList(ctx context.Context, in *CommentInfoGetListReq, opts ...grpc.CallOption) (*CommentInfoGetListRes, error)
	Create(ctx context.Context, in *CommentInfoCreateReq, opts ...grpc.CallOption) (*CommentInfoCreateRes, error)
	Delete(ctx context.Context, in *CommentInfoDeleteReq, opts ...grpc.CallOption) (*CommentInfoDeleteRes, error)
}

type commentInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentInfoClient(cc grpc.ClientConnInterface) CommentInfoClient {
	return &commentInfoClient{cc}
}

func (c *commentInfoClient) GetList(ctx context.Context, in *CommentInfoGetListReq, opts ...grpc.CallOption) (*CommentInfoGetListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentInfoGetListRes)
	err := c.cc.Invoke(ctx, CommentInfo_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentInfoClient) Create(ctx context.Context, in *CommentInfoCreateReq, opts ...grpc.CallOption) (*CommentInfoCreateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentInfoCreateRes)
	err := c.cc.Invoke(ctx, CommentInfo_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentInfoClient) Delete(ctx context.Context, in *CommentInfoDeleteReq, opts ...grpc.CallOption) (*CommentInfoDeleteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentInfoDeleteRes)
	err := c.cc.Invoke(ctx, CommentInfo_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentInfoServer is the server API for CommentInfo service.
// All implementations must embed UnimplementedCommentInfoServer
// for forward compatibility.
type CommentInfoServer interface {
	GetList(context.Context, *CommentInfoGetListReq) (*CommentInfoGetListRes, error)
	Create(context.Context, *CommentInfoCreateReq) (*CommentInfoCreateRes, error)
	Delete(context.Context, *CommentInfoDeleteReq) (*CommentInfoDeleteRes, error)
	mustEmbedUnimplementedCommentInfoServer()
}

// UnimplementedCommentInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommentInfoServer struct{}

func (UnimplementedCommentInfoServer) GetList(context.Context, *CommentInfoGetListReq) (*CommentInfoGetListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedCommentInfoServer) Create(context.Context, *CommentInfoCreateReq) (*CommentInfoCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCommentInfoServer) Delete(context.Context, *CommentInfoDeleteReq) (*CommentInfoDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCommentInfoServer) mustEmbedUnimplementedCommentInfoServer() {}
func (UnimplementedCommentInfoServer) testEmbeddedByValue()                     {}

// UnsafeCommentInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentInfoServer will
// result in compilation errors.
type UnsafeCommentInfoServer interface {
	mustEmbedUnimplementedCommentInfoServer()
}

func RegisterCommentInfoServer(s grpc.ServiceRegistrar, srv CommentInfoServer) {
	// If the following call pancis, it indicates UnimplementedCommentInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommentInfo_ServiceDesc, srv)
}

func _CommentInfo_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentInfoGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentInfoServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentInfo_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentInfoServer).GetList(ctx, req.(*CommentInfoGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentInfo_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentInfoCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentInfoServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentInfo_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentInfoServer).Create(ctx, req.(*CommentInfoCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentInfo_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentInfoServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentInfo_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentInfoServer).Delete(ctx, req.(*CommentInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentInfo_ServiceDesc is the grpc.ServiceDesc for CommentInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comment_info.v1.comment_info",
	HandlerType: (*CommentInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _CommentInfo_GetList_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CommentInfo_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CommentInfo_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment_info/v1/comment_info.proto",
}
