// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: position_info/v1/position_info.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PositionInfo_GetList_FullMethodName = "/position_info.v1.position_info/GetList"
	PositionInfo_Create_FullMethodName  = "/position_info.v1.position_info/Create"
	PositionInfo_Update_FullMethodName  = "/position_info.v1.position_info/Update"
	PositionInfo_Delete_FullMethodName  = "/position_info.v1.position_info/Delete"
)

// PositionInfoClient is the client API for PositionInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PositionInfoClient interface {
	GetList(ctx context.Context, in *PositionInfoGetListReq, opts ...grpc.CallOption) (*PositionInfoGetListRes, error)
	Create(ctx context.Context, in *PositionInfoCreateReq, opts ...grpc.CallOption) (*PositionInfoCreateRes, error)
	Update(ctx context.Context, in *PositionInfoUpdateReq, opts ...grpc.CallOption) (*PositionInfoUpdateRes, error)
	Delete(ctx context.Context, in *PositionInfoDeleteReq, opts ...grpc.CallOption) (*PositionInfoDeleteRes, error)
}

type positionInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewPositionInfoClient(cc grpc.ClientConnInterface) PositionInfoClient {
	return &positionInfoClient{cc}
}

func (c *positionInfoClient) GetList(ctx context.Context, in *PositionInfoGetListReq, opts ...grpc.CallOption) (*PositionInfoGetListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PositionInfoGetListRes)
	err := c.cc.Invoke(ctx, PositionInfo_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionInfoClient) Create(ctx context.Context, in *PositionInfoCreateReq, opts ...grpc.CallOption) (*PositionInfoCreateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PositionInfoCreateRes)
	err := c.cc.Invoke(ctx, PositionInfo_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionInfoClient) Update(ctx context.Context, in *PositionInfoUpdateReq, opts ...grpc.CallOption) (*PositionInfoUpdateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PositionInfoUpdateRes)
	err := c.cc.Invoke(ctx, PositionInfo_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionInfoClient) Delete(ctx context.Context, in *PositionInfoDeleteReq, opts ...grpc.CallOption) (*PositionInfoDeleteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PositionInfoDeleteRes)
	err := c.cc.Invoke(ctx, PositionInfo_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PositionInfoServer is the server API for PositionInfo service.
// All implementations must embed UnimplementedPositionInfoServer
// for forward compatibility.
type PositionInfoServer interface {
	GetList(context.Context, *PositionInfoGetListReq) (*PositionInfoGetListRes, error)
	Create(context.Context, *PositionInfoCreateReq) (*PositionInfoCreateRes, error)
	Update(context.Context, *PositionInfoUpdateReq) (*PositionInfoUpdateRes, error)
	Delete(context.Context, *PositionInfoDeleteReq) (*PositionInfoDeleteRes, error)
	mustEmbedUnimplementedPositionInfoServer()
}

// UnimplementedPositionInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPositionInfoServer struct{}

func (UnimplementedPositionInfoServer) GetList(context.Context, *PositionInfoGetListReq) (*PositionInfoGetListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedPositionInfoServer) Create(context.Context, *PositionInfoCreateReq) (*PositionInfoCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPositionInfoServer) Update(context.Context, *PositionInfoUpdateReq) (*PositionInfoUpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPositionInfoServer) Delete(context.Context, *PositionInfoDeleteReq) (*PositionInfoDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPositionInfoServer) mustEmbedUnimplementedPositionInfoServer() {}
func (UnimplementedPositionInfoServer) testEmbeddedByValue()                      {}

// UnsafePositionInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PositionInfoServer will
// result in compilation errors.
type UnsafePositionInfoServer interface {
	mustEmbedUnimplementedPositionInfoServer()
}

func RegisterPositionInfoServer(s grpc.ServiceRegistrar, srv PositionInfoServer) {
	// If the following call pancis, it indicates UnimplementedPositionInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PositionInfo_ServiceDesc, srv)
}

func _PositionInfo_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionInfoGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionInfoServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PositionInfo_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionInfoServer).GetList(ctx, req.(*PositionInfoGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionInfo_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionInfoCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionInfoServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PositionInfo_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionInfoServer).Create(ctx, req.(*PositionInfoCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionInfo_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionInfoUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionInfoServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PositionInfo_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionInfoServer).Update(ctx, req.(*PositionInfoUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionInfo_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionInfoServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PositionInfo_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionInfoServer).Delete(ctx, req.(*PositionInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PositionInfo_ServiceDesc is the grpc.ServiceDesc for PositionInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PositionInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "position_info.v1.position_info",
	HandlerType: (*PositionInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _PositionInfo_GetList_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PositionInfo_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PositionInfo_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PositionInfo_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "position_info/v1/position_info.proto",
}
