// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: rotation_info/v1/rotation_info.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RotationInfo_GetList_FullMethodName = "/rotation_info.v1.rotation_info/GetList"
	RotationInfo_Create_FullMethodName  = "/rotation_info.v1.rotation_info/Create"
	RotationInfo_Update_FullMethodName  = "/rotation_info.v1.rotation_info/Update"
	RotationInfo_Delete_FullMethodName  = "/rotation_info.v1.rotation_info/Delete"
)

// RotationInfoClient is the client API for RotationInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RotationInfoClient interface {
	GetList(ctx context.Context, in *RotationInfoGetListReq, opts ...grpc.CallOption) (*RotationInfoGetListRes, error)
	Create(ctx context.Context, in *RotationInfoCreateReq, opts ...grpc.CallOption) (*RotationInfoCreateRes, error)
	Update(ctx context.Context, in *RotationInfoUpdateReq, opts ...grpc.CallOption) (*RotationInfoUpdateRes, error)
	Delete(ctx context.Context, in *RotationInfoDeleteReq, opts ...grpc.CallOption) (*RotationInfoDeleteRes, error)
}

type rotationInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewRotationInfoClient(cc grpc.ClientConnInterface) RotationInfoClient {
	return &rotationInfoClient{cc}
}

func (c *rotationInfoClient) GetList(ctx context.Context, in *RotationInfoGetListReq, opts ...grpc.CallOption) (*RotationInfoGetListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RotationInfoGetListRes)
	err := c.cc.Invoke(ctx, RotationInfo_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotationInfoClient) Create(ctx context.Context, in *RotationInfoCreateReq, opts ...grpc.CallOption) (*RotationInfoCreateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RotationInfoCreateRes)
	err := c.cc.Invoke(ctx, RotationInfo_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotationInfoClient) Update(ctx context.Context, in *RotationInfoUpdateReq, opts ...grpc.CallOption) (*RotationInfoUpdateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RotationInfoUpdateRes)
	err := c.cc.Invoke(ctx, RotationInfo_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotationInfoClient) Delete(ctx context.Context, in *RotationInfoDeleteReq, opts ...grpc.CallOption) (*RotationInfoDeleteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RotationInfoDeleteRes)
	err := c.cc.Invoke(ctx, RotationInfo_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RotationInfoServer is the server API for RotationInfo service.
// All implementations must embed UnimplementedRotationInfoServer
// for forward compatibility.
type RotationInfoServer interface {
	GetList(context.Context, *RotationInfoGetListReq) (*RotationInfoGetListRes, error)
	Create(context.Context, *RotationInfoCreateReq) (*RotationInfoCreateRes, error)
	Update(context.Context, *RotationInfoUpdateReq) (*RotationInfoUpdateRes, error)
	Delete(context.Context, *RotationInfoDeleteReq) (*RotationInfoDeleteRes, error)
	mustEmbedUnimplementedRotationInfoServer()
}

// UnimplementedRotationInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRotationInfoServer struct{}

func (UnimplementedRotationInfoServer) GetList(context.Context, *RotationInfoGetListReq) (*RotationInfoGetListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedRotationInfoServer) Create(context.Context, *RotationInfoCreateReq) (*RotationInfoCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRotationInfoServer) Update(context.Context, *RotationInfoUpdateReq) (*RotationInfoUpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRotationInfoServer) Delete(context.Context, *RotationInfoDeleteReq) (*RotationInfoDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRotationInfoServer) mustEmbedUnimplementedRotationInfoServer() {}
func (UnimplementedRotationInfoServer) testEmbeddedByValue()                      {}

// UnsafeRotationInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RotationInfoServer will
// result in compilation errors.
type UnsafeRotationInfoServer interface {
	mustEmbedUnimplementedRotationInfoServer()
}

func RegisterRotationInfoServer(s grpc.ServiceRegistrar, srv RotationInfoServer) {
	// If the following call pancis, it indicates UnimplementedRotationInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RotationInfo_ServiceDesc, srv)
}

func _RotationInfo_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotationInfoGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationInfoServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RotationInfo_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationInfoServer).GetList(ctx, req.(*RotationInfoGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RotationInfo_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotationInfoCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationInfoServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RotationInfo_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationInfoServer).Create(ctx, req.(*RotationInfoCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RotationInfo_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotationInfoUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationInfoServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RotationInfo_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationInfoServer).Update(ctx, req.(*RotationInfoUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RotationInfo_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotationInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotationInfoServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RotationInfo_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotationInfoServer).Delete(ctx, req.(*RotationInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RotationInfo_ServiceDesc is the grpc.ServiceDesc for RotationInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RotationInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rotation_info.v1.rotation_info",
	HandlerType: (*RotationInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _RotationInfo_GetList_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RotationInfo_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RotationInfo_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RotationInfo_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rotation_info/v1/rotation_info.proto",
}
