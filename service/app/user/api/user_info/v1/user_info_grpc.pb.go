// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: user_info/v1/user_info.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserInfo_Login_FullMethodName          = "/user_info.UserInfo/Login"
	UserInfo_Register_FullMethodName       = "/user_info.UserInfo/Register"
	UserInfo_UpdatePassword_FullMethodName = "/user_info.UserInfo/UpdatePassword"
	UserInfo_GetUserInfo_FullMethodName    = "/user_info.UserInfo/GetUserInfo"
)

// UserInfoClient is the client API for UserInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserInfoClient interface {
	Login(ctx context.Context, in *UserInfoLoginReq, opts ...grpc.CallOption) (*UserInfoLoginRes, error)
	Register(ctx context.Context, in *UserInfoRegisterReq, opts ...grpc.CallOption) (*UserInfoRegisterRes, error)
	UpdatePassword(ctx context.Context, in *UserInfoUpdatePasswordReq, opts ...grpc.CallOption) (*UserInfoUpdatePasswordRes, error)
	GetUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoRes, error)
}

type userInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInfoClient(cc grpc.ClientConnInterface) UserInfoClient {
	return &userInfoClient{cc}
}

func (c *userInfoClient) Login(ctx context.Context, in *UserInfoLoginReq, opts ...grpc.CallOption) (*UserInfoLoginRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfoLoginRes)
	err := c.cc.Invoke(ctx, UserInfo_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoClient) Register(ctx context.Context, in *UserInfoRegisterReq, opts ...grpc.CallOption) (*UserInfoRegisterRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfoRegisterRes)
	err := c.cc.Invoke(ctx, UserInfo_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoClient) UpdatePassword(ctx context.Context, in *UserInfoUpdatePasswordReq, opts ...grpc.CallOption) (*UserInfoUpdatePasswordRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfoUpdatePasswordRes)
	err := c.cc.Invoke(ctx, UserInfo_UpdatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoClient) GetUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfoRes)
	err := c.cc.Invoke(ctx, UserInfo_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInfoServer is the server API for UserInfo service.
// All implementations must embed UnimplementedUserInfoServer
// for forward compatibility.
type UserInfoServer interface {
	Login(context.Context, *UserInfoLoginReq) (*UserInfoLoginRes, error)
	Register(context.Context, *UserInfoRegisterReq) (*UserInfoRegisterRes, error)
	UpdatePassword(context.Context, *UserInfoUpdatePasswordReq) (*UserInfoUpdatePasswordRes, error)
	GetUserInfo(context.Context, *UserInfoReq) (*UserInfoRes, error)
	mustEmbedUnimplementedUserInfoServer()
}

// UnimplementedUserInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserInfoServer struct{}

func (UnimplementedUserInfoServer) Login(context.Context, *UserInfoLoginReq) (*UserInfoLoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserInfoServer) Register(context.Context, *UserInfoRegisterReq) (*UserInfoRegisterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserInfoServer) UpdatePassword(context.Context, *UserInfoUpdatePasswordReq) (*UserInfoUpdatePasswordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedUserInfoServer) GetUserInfo(context.Context, *UserInfoReq) (*UserInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserInfoServer) mustEmbedUnimplementedUserInfoServer() {}
func (UnimplementedUserInfoServer) testEmbeddedByValue()                  {}

// UnsafeUserInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserInfoServer will
// result in compilation errors.
type UnsafeUserInfoServer interface {
	mustEmbedUnimplementedUserInfoServer()
}

func RegisterUserInfoServer(s grpc.ServiceRegistrar, srv UserInfoServer) {
	// If the following call pancis, it indicates UnimplementedUserInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserInfo_ServiceDesc, srv)
}

func _UserInfo_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInfo_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoServer).Login(ctx, req.(*UserInfoLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfo_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInfo_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoServer).Register(ctx, req.(*UserInfoRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfo_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoUpdatePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInfo_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoServer).UpdatePassword(ctx, req.(*UserInfoUpdatePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfo_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInfo_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoServer).GetUserInfo(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserInfo_ServiceDesc is the grpc.ServiceDesc for UserInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_info.UserInfo",
	HandlerType: (*UserInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserInfo_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UserInfo_Register_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _UserInfo_UpdatePassword_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserInfo_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_info/v1/user_info.proto",
}
