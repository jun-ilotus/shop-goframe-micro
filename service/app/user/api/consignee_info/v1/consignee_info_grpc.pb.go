// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: consignee_info/v1/consignee_info.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConsigneeInfo_GetList_FullMethodName = "/consignee_info.consignee_info/GetList"
	ConsigneeInfo_Create_FullMethodName  = "/consignee_info.consignee_info/Create"
	ConsigneeInfo_Update_FullMethodName  = "/consignee_info.consignee_info/Update"
	ConsigneeInfo_Delete_FullMethodName  = "/consignee_info.consignee_info/Delete"
)

// ConsigneeInfoClient is the client API for ConsigneeInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsigneeInfoClient interface {
	GetList(ctx context.Context, in *ConsigneeInfoGetListReq, opts ...grpc.CallOption) (*ConsigneeInfoGetListRes, error)
	Create(ctx context.Context, in *ConsigneeInfoCreateReq, opts ...grpc.CallOption) (*ConsigneeInfoCreateRes, error)
	Update(ctx context.Context, in *ConsigneeInfoUpdateReq, opts ...grpc.CallOption) (*ConsigneeInfoUpdateRes, error)
	Delete(ctx context.Context, in *ConsigneeInfoDeleteReq, opts ...grpc.CallOption) (*ConsigneeInfoDeleteRes, error)
}

type consigneeInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewConsigneeInfoClient(cc grpc.ClientConnInterface) ConsigneeInfoClient {
	return &consigneeInfoClient{cc}
}

func (c *consigneeInfoClient) GetList(ctx context.Context, in *ConsigneeInfoGetListReq, opts ...grpc.CallOption) (*ConsigneeInfoGetListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsigneeInfoGetListRes)
	err := c.cc.Invoke(ctx, ConsigneeInfo_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consigneeInfoClient) Create(ctx context.Context, in *ConsigneeInfoCreateReq, opts ...grpc.CallOption) (*ConsigneeInfoCreateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsigneeInfoCreateRes)
	err := c.cc.Invoke(ctx, ConsigneeInfo_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consigneeInfoClient) Update(ctx context.Context, in *ConsigneeInfoUpdateReq, opts ...grpc.CallOption) (*ConsigneeInfoUpdateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsigneeInfoUpdateRes)
	err := c.cc.Invoke(ctx, ConsigneeInfo_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consigneeInfoClient) Delete(ctx context.Context, in *ConsigneeInfoDeleteReq, opts ...grpc.CallOption) (*ConsigneeInfoDeleteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsigneeInfoDeleteRes)
	err := c.cc.Invoke(ctx, ConsigneeInfo_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsigneeInfoServer is the server API for ConsigneeInfo service.
// All implementations must embed UnimplementedConsigneeInfoServer
// for forward compatibility.
type ConsigneeInfoServer interface {
	GetList(context.Context, *ConsigneeInfoGetListReq) (*ConsigneeInfoGetListRes, error)
	Create(context.Context, *ConsigneeInfoCreateReq) (*ConsigneeInfoCreateRes, error)
	Update(context.Context, *ConsigneeInfoUpdateReq) (*ConsigneeInfoUpdateRes, error)
	Delete(context.Context, *ConsigneeInfoDeleteReq) (*ConsigneeInfoDeleteRes, error)
	mustEmbedUnimplementedConsigneeInfoServer()
}

// UnimplementedConsigneeInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsigneeInfoServer struct{}

func (UnimplementedConsigneeInfoServer) GetList(context.Context, *ConsigneeInfoGetListReq) (*ConsigneeInfoGetListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedConsigneeInfoServer) Create(context.Context, *ConsigneeInfoCreateReq) (*ConsigneeInfoCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedConsigneeInfoServer) Update(context.Context, *ConsigneeInfoUpdateReq) (*ConsigneeInfoUpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedConsigneeInfoServer) Delete(context.Context, *ConsigneeInfoDeleteReq) (*ConsigneeInfoDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedConsigneeInfoServer) mustEmbedUnimplementedConsigneeInfoServer() {}
func (UnimplementedConsigneeInfoServer) testEmbeddedByValue()                       {}

// UnsafeConsigneeInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsigneeInfoServer will
// result in compilation errors.
type UnsafeConsigneeInfoServer interface {
	mustEmbedUnimplementedConsigneeInfoServer()
}

func RegisterConsigneeInfoServer(s grpc.ServiceRegistrar, srv ConsigneeInfoServer) {
	// If the following call pancis, it indicates UnimplementedConsigneeInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConsigneeInfo_ServiceDesc, srv)
}

func _ConsigneeInfo_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsigneeInfoGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsigneeInfoServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsigneeInfo_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsigneeInfoServer).GetList(ctx, req.(*ConsigneeInfoGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsigneeInfo_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsigneeInfoCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsigneeInfoServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsigneeInfo_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsigneeInfoServer).Create(ctx, req.(*ConsigneeInfoCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsigneeInfo_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsigneeInfoUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsigneeInfoServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsigneeInfo_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsigneeInfoServer).Update(ctx, req.(*ConsigneeInfoUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsigneeInfo_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsigneeInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsigneeInfoServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsigneeInfo_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsigneeInfoServer).Delete(ctx, req.(*ConsigneeInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsigneeInfo_ServiceDesc is the grpc.ServiceDesc for ConsigneeInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsigneeInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consignee_info.consignee_info",
	HandlerType: (*ConsigneeInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _ConsigneeInfo_GetList_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ConsigneeInfo_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ConsigneeInfo_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ConsigneeInfo_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consignee_info/v1/consignee_info.proto",
}
