// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: refund_info/v1/refund_info.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RefundInfo_GetList_FullMethodName   = "/refund_info.v1.refund_info/GetList"
	RefundInfo_GetDetail_FullMethodName = "/refund_info.v1.refund_info/GetDetail"
	RefundInfo_Create_FullMethodName    = "/refund_info.v1.refund_info/Create"
)

// RefundInfoClient is the client API for RefundInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RefundInfoClient interface {
	GetList(ctx context.Context, in *RefundInfoGetListReq, opts ...grpc.CallOption) (*RefundInfoGetListRes, error)
	GetDetail(ctx context.Context, in *RefundInfoGetDetailReq, opts ...grpc.CallOption) (*RefundInfoGetDetailRes, error)
	Create(ctx context.Context, in *RefundInfoCreateReq, opts ...grpc.CallOption) (*RefundInfoCreateRes, error)
}

type refundInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewRefundInfoClient(cc grpc.ClientConnInterface) RefundInfoClient {
	return &refundInfoClient{cc}
}

func (c *refundInfoClient) GetList(ctx context.Context, in *RefundInfoGetListReq, opts ...grpc.CallOption) (*RefundInfoGetListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundInfoGetListRes)
	err := c.cc.Invoke(ctx, RefundInfo_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refundInfoClient) GetDetail(ctx context.Context, in *RefundInfoGetDetailReq, opts ...grpc.CallOption) (*RefundInfoGetDetailRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundInfoGetDetailRes)
	err := c.cc.Invoke(ctx, RefundInfo_GetDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refundInfoClient) Create(ctx context.Context, in *RefundInfoCreateReq, opts ...grpc.CallOption) (*RefundInfoCreateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundInfoCreateRes)
	err := c.cc.Invoke(ctx, RefundInfo_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RefundInfoServer is the server API for RefundInfo service.
// All implementations must embed UnimplementedRefundInfoServer
// for forward compatibility.
type RefundInfoServer interface {
	GetList(context.Context, *RefundInfoGetListReq) (*RefundInfoGetListRes, error)
	GetDetail(context.Context, *RefundInfoGetDetailReq) (*RefundInfoGetDetailRes, error)
	Create(context.Context, *RefundInfoCreateReq) (*RefundInfoCreateRes, error)
	mustEmbedUnimplementedRefundInfoServer()
}

// UnimplementedRefundInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRefundInfoServer struct{}

func (UnimplementedRefundInfoServer) GetList(context.Context, *RefundInfoGetListReq) (*RefundInfoGetListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedRefundInfoServer) GetDetail(context.Context, *RefundInfoGetDetailReq) (*RefundInfoGetDetailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedRefundInfoServer) Create(context.Context, *RefundInfoCreateReq) (*RefundInfoCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRefundInfoServer) mustEmbedUnimplementedRefundInfoServer() {}
func (UnimplementedRefundInfoServer) testEmbeddedByValue()                    {}

// UnsafeRefundInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RefundInfoServer will
// result in compilation errors.
type UnsafeRefundInfoServer interface {
	mustEmbedUnimplementedRefundInfoServer()
}

func RegisterRefundInfoServer(s grpc.ServiceRegistrar, srv RefundInfoServer) {
	// If the following call pancis, it indicates UnimplementedRefundInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RefundInfo_ServiceDesc, srv)
}

func _RefundInfo_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundInfoGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundInfoServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefundInfo_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundInfoServer).GetList(ctx, req.(*RefundInfoGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefundInfo_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundInfoGetDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundInfoServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefundInfo_GetDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundInfoServer).GetDetail(ctx, req.(*RefundInfoGetDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefundInfo_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundInfoCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundInfoServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefundInfo_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundInfoServer).Create(ctx, req.(*RefundInfoCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RefundInfo_ServiceDesc is the grpc.ServiceDesc for RefundInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RefundInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "refund_info.v1.refund_info",
	HandlerType: (*RefundInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _RefundInfo_GetList_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _RefundInfo_GetDetail_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RefundInfo_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "refund_info/v1/refund_info.proto",
}
