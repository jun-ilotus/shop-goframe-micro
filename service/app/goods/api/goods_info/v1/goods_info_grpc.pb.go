// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: goods_info/v1/goods_info.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoodsInfo_GetList_FullMethodName   = "/goods_info.v1.goods_info/GetList"
	GoodsInfo_GetDetail_FullMethodName = "/goods_info.v1.goods_info/GetDetail"
	GoodsInfo_Create_FullMethodName    = "/goods_info.v1.goods_info/Create"
	GoodsInfo_Update_FullMethodName    = "/goods_info.v1.goods_info/Update"
	GoodsInfo_Delete_FullMethodName    = "/goods_info.v1.goods_info/Delete"
)

// GoodsInfoClient is the client API for GoodsInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsInfoClient interface {
	GetList(ctx context.Context, in *GoodsInfoGetListReq, opts ...grpc.CallOption) (*GoodsInfoGetListRes, error)
	GetDetail(ctx context.Context, in *GoodsInfoGetDetailReq, opts ...grpc.CallOption) (*GoodsInfoGetDetailRes, error)
	Create(ctx context.Context, in *GoodsInfoCreateReq, opts ...grpc.CallOption) (*GoodsInfoCreateRes, error)
	Update(ctx context.Context, in *GoodsInfoUpdateReq, opts ...grpc.CallOption) (*GoodsInfoUpdateRes, error)
	Delete(ctx context.Context, in *GoodsInfoDeleteReq, opts ...grpc.CallOption) (*GoodsInfoDeleteRes, error)
}

type goodsInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsInfoClient(cc grpc.ClientConnInterface) GoodsInfoClient {
	return &goodsInfoClient{cc}
}

func (c *goodsInfoClient) GetList(ctx context.Context, in *GoodsInfoGetListReq, opts ...grpc.CallOption) (*GoodsInfoGetListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsInfoGetListRes)
	err := c.cc.Invoke(ctx, GoodsInfo_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsInfoClient) GetDetail(ctx context.Context, in *GoodsInfoGetDetailReq, opts ...grpc.CallOption) (*GoodsInfoGetDetailRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsInfoGetDetailRes)
	err := c.cc.Invoke(ctx, GoodsInfo_GetDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsInfoClient) Create(ctx context.Context, in *GoodsInfoCreateReq, opts ...grpc.CallOption) (*GoodsInfoCreateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsInfoCreateRes)
	err := c.cc.Invoke(ctx, GoodsInfo_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsInfoClient) Update(ctx context.Context, in *GoodsInfoUpdateReq, opts ...grpc.CallOption) (*GoodsInfoUpdateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsInfoUpdateRes)
	err := c.cc.Invoke(ctx, GoodsInfo_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsInfoClient) Delete(ctx context.Context, in *GoodsInfoDeleteReq, opts ...grpc.CallOption) (*GoodsInfoDeleteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsInfoDeleteRes)
	err := c.cc.Invoke(ctx, GoodsInfo_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsInfoServer is the server API for GoodsInfo service.
// All implementations must embed UnimplementedGoodsInfoServer
// for forward compatibility.
type GoodsInfoServer interface {
	GetList(context.Context, *GoodsInfoGetListReq) (*GoodsInfoGetListRes, error)
	GetDetail(context.Context, *GoodsInfoGetDetailReq) (*GoodsInfoGetDetailRes, error)
	Create(context.Context, *GoodsInfoCreateReq) (*GoodsInfoCreateRes, error)
	Update(context.Context, *GoodsInfoUpdateReq) (*GoodsInfoUpdateRes, error)
	Delete(context.Context, *GoodsInfoDeleteReq) (*GoodsInfoDeleteRes, error)
	mustEmbedUnimplementedGoodsInfoServer()
}

// UnimplementedGoodsInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoodsInfoServer struct{}

func (UnimplementedGoodsInfoServer) GetList(context.Context, *GoodsInfoGetListReq) (*GoodsInfoGetListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedGoodsInfoServer) GetDetail(context.Context, *GoodsInfoGetDetailReq) (*GoodsInfoGetDetailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedGoodsInfoServer) Create(context.Context, *GoodsInfoCreateReq) (*GoodsInfoCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGoodsInfoServer) Update(context.Context, *GoodsInfoUpdateReq) (*GoodsInfoUpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGoodsInfoServer) Delete(context.Context, *GoodsInfoDeleteReq) (*GoodsInfoDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGoodsInfoServer) mustEmbedUnimplementedGoodsInfoServer() {}
func (UnimplementedGoodsInfoServer) testEmbeddedByValue()                   {}

// UnsafeGoodsInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsInfoServer will
// result in compilation errors.
type UnsafeGoodsInfoServer interface {
	mustEmbedUnimplementedGoodsInfoServer()
}

func RegisterGoodsInfoServer(s grpc.ServiceRegistrar, srv GoodsInfoServer) {
	// If the following call pancis, it indicates UnimplementedGoodsInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoodsInfo_ServiceDesc, srv)
}

func _GoodsInfo_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsInfoGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsInfoServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsInfo_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsInfoServer).GetList(ctx, req.(*GoodsInfoGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsInfo_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsInfoGetDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsInfoServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsInfo_GetDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsInfoServer).GetDetail(ctx, req.(*GoodsInfoGetDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsInfo_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsInfoCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsInfoServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsInfo_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsInfoServer).Create(ctx, req.(*GoodsInfoCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsInfo_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsInfoUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsInfoServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsInfo_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsInfoServer).Update(ctx, req.(*GoodsInfoUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsInfo_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsInfoServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsInfo_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsInfoServer).Delete(ctx, req.(*GoodsInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoodsInfo_ServiceDesc is the grpc.ServiceDesc for GoodsInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodsInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goods_info.v1.goods_info",
	HandlerType: (*GoodsInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _GoodsInfo_GetList_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _GoodsInfo_GetDetail_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _GoodsInfo_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GoodsInfo_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GoodsInfo_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods_info/v1/goods_info.proto",
}
