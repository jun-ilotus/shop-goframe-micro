// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: category_info/v1/category_info.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CategoryInfo_GetList_FullMethodName = "/category_info.v1.category_info/GetList"
	CategoryInfo_GetAll_FullMethodName  = "/category_info.v1.category_info/GetAll"
	CategoryInfo_Create_FullMethodName  = "/category_info.v1.category_info/Create"
	CategoryInfo_Update_FullMethodName  = "/category_info.v1.category_info/Update"
	CategoryInfo_Delete_FullMethodName  = "/category_info.v1.category_info/Delete"
)

// CategoryInfoClient is the client API for CategoryInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryInfoClient interface {
	GetList(ctx context.Context, in *CategoryInfoGetListReq, opts ...grpc.CallOption) (*CategoryInfoGetListRes, error)
	GetAll(ctx context.Context, in *CategoryInfoGetAllReq, opts ...grpc.CallOption) (*CategoryInfoGetAllRes, error)
	Create(ctx context.Context, in *CategoryInfoCreateReq, opts ...grpc.CallOption) (*CategoryInfoCreateRes, error)
	Update(ctx context.Context, in *CategoryInfoUpdateReq, opts ...grpc.CallOption) (*CategoryInfoUpdateRes, error)
	Delete(ctx context.Context, in *CategoryInfoDeleteReq, opts ...grpc.CallOption) (*CategoryInfoDeleteRes, error)
}

type categoryInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryInfoClient(cc grpc.ClientConnInterface) CategoryInfoClient {
	return &categoryInfoClient{cc}
}

func (c *categoryInfoClient) GetList(ctx context.Context, in *CategoryInfoGetListReq, opts ...grpc.CallOption) (*CategoryInfoGetListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryInfoGetListRes)
	err := c.cc.Invoke(ctx, CategoryInfo_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryInfoClient) GetAll(ctx context.Context, in *CategoryInfoGetAllReq, opts ...grpc.CallOption) (*CategoryInfoGetAllRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryInfoGetAllRes)
	err := c.cc.Invoke(ctx, CategoryInfo_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryInfoClient) Create(ctx context.Context, in *CategoryInfoCreateReq, opts ...grpc.CallOption) (*CategoryInfoCreateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryInfoCreateRes)
	err := c.cc.Invoke(ctx, CategoryInfo_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryInfoClient) Update(ctx context.Context, in *CategoryInfoUpdateReq, opts ...grpc.CallOption) (*CategoryInfoUpdateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryInfoUpdateRes)
	err := c.cc.Invoke(ctx, CategoryInfo_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryInfoClient) Delete(ctx context.Context, in *CategoryInfoDeleteReq, opts ...grpc.CallOption) (*CategoryInfoDeleteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryInfoDeleteRes)
	err := c.cc.Invoke(ctx, CategoryInfo_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryInfoServer is the server API for CategoryInfo service.
// All implementations must embed UnimplementedCategoryInfoServer
// for forward compatibility.
type CategoryInfoServer interface {
	GetList(context.Context, *CategoryInfoGetListReq) (*CategoryInfoGetListRes, error)
	GetAll(context.Context, *CategoryInfoGetAllReq) (*CategoryInfoGetAllRes, error)
	Create(context.Context, *CategoryInfoCreateReq) (*CategoryInfoCreateRes, error)
	Update(context.Context, *CategoryInfoUpdateReq) (*CategoryInfoUpdateRes, error)
	Delete(context.Context, *CategoryInfoDeleteReq) (*CategoryInfoDeleteRes, error)
	mustEmbedUnimplementedCategoryInfoServer()
}

// UnimplementedCategoryInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCategoryInfoServer struct{}

func (UnimplementedCategoryInfoServer) GetList(context.Context, *CategoryInfoGetListReq) (*CategoryInfoGetListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedCategoryInfoServer) GetAll(context.Context, *CategoryInfoGetAllReq) (*CategoryInfoGetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedCategoryInfoServer) Create(context.Context, *CategoryInfoCreateReq) (*CategoryInfoCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCategoryInfoServer) Update(context.Context, *CategoryInfoUpdateReq) (*CategoryInfoUpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCategoryInfoServer) Delete(context.Context, *CategoryInfoDeleteReq) (*CategoryInfoDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCategoryInfoServer) mustEmbedUnimplementedCategoryInfoServer() {}
func (UnimplementedCategoryInfoServer) testEmbeddedByValue()                      {}

// UnsafeCategoryInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryInfoServer will
// result in compilation errors.
type UnsafeCategoryInfoServer interface {
	mustEmbedUnimplementedCategoryInfoServer()
}

func RegisterCategoryInfoServer(s grpc.ServiceRegistrar, srv CategoryInfoServer) {
	// If the following call pancis, it indicates UnimplementedCategoryInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CategoryInfo_ServiceDesc, srv)
}

func _CategoryInfo_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryInfoGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryInfoServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryInfo_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryInfoServer).GetList(ctx, req.(*CategoryInfoGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryInfo_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryInfoGetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryInfoServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryInfo_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryInfoServer).GetAll(ctx, req.(*CategoryInfoGetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryInfo_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryInfoCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryInfoServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryInfo_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryInfoServer).Create(ctx, req.(*CategoryInfoCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryInfo_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryInfoUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryInfoServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryInfo_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryInfoServer).Update(ctx, req.(*CategoryInfoUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryInfo_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryInfoServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryInfo_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryInfoServer).Delete(ctx, req.(*CategoryInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoryInfo_ServiceDesc is the grpc.ServiceDesc for CategoryInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "category_info.v1.category_info",
	HandlerType: (*CategoryInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _CategoryInfo_GetList_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _CategoryInfo_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CategoryInfo_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CategoryInfo_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CategoryInfo_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "category_info/v1/category_info.proto",
}
