// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: goods_images/v1/goods_images.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoodsImages_GetList_FullMethodName = "/goods_images.v1.goods_images/GetList"
	GoodsImages_Create_FullMethodName  = "/goods_images.v1.goods_images/Create"
	GoodsImages_Delete_FullMethodName  = "/goods_images.v1.goods_images/Delete"
)

// GoodsImagesClient is the client API for GoodsImages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsImagesClient interface {
	GetList(ctx context.Context, in *GoodsImagesGetListReq, opts ...grpc.CallOption) (*GoodsImagesGetListRes, error)
	Create(ctx context.Context, in *GoodsImagesCreateReq, opts ...grpc.CallOption) (*GoodsImagesCreateRes, error)
	Delete(ctx context.Context, in *GoodsImagesDeleteReq, opts ...grpc.CallOption) (*GoodsImagesDeleteRes, error)
}

type goodsImagesClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsImagesClient(cc grpc.ClientConnInterface) GoodsImagesClient {
	return &goodsImagesClient{cc}
}

func (c *goodsImagesClient) GetList(ctx context.Context, in *GoodsImagesGetListReq, opts ...grpc.CallOption) (*GoodsImagesGetListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsImagesGetListRes)
	err := c.cc.Invoke(ctx, GoodsImages_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsImagesClient) Create(ctx context.Context, in *GoodsImagesCreateReq, opts ...grpc.CallOption) (*GoodsImagesCreateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsImagesCreateRes)
	err := c.cc.Invoke(ctx, GoodsImages_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsImagesClient) Delete(ctx context.Context, in *GoodsImagesDeleteReq, opts ...grpc.CallOption) (*GoodsImagesDeleteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsImagesDeleteRes)
	err := c.cc.Invoke(ctx, GoodsImages_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsImagesServer is the server API for GoodsImages service.
// All implementations must embed UnimplementedGoodsImagesServer
// for forward compatibility.
type GoodsImagesServer interface {
	GetList(context.Context, *GoodsImagesGetListReq) (*GoodsImagesGetListRes, error)
	Create(context.Context, *GoodsImagesCreateReq) (*GoodsImagesCreateRes, error)
	Delete(context.Context, *GoodsImagesDeleteReq) (*GoodsImagesDeleteRes, error)
	mustEmbedUnimplementedGoodsImagesServer()
}

// UnimplementedGoodsImagesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoodsImagesServer struct{}

func (UnimplementedGoodsImagesServer) GetList(context.Context, *GoodsImagesGetListReq) (*GoodsImagesGetListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedGoodsImagesServer) Create(context.Context, *GoodsImagesCreateReq) (*GoodsImagesCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGoodsImagesServer) Delete(context.Context, *GoodsImagesDeleteReq) (*GoodsImagesDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGoodsImagesServer) mustEmbedUnimplementedGoodsImagesServer() {}
func (UnimplementedGoodsImagesServer) testEmbeddedByValue()                     {}

// UnsafeGoodsImagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsImagesServer will
// result in compilation errors.
type UnsafeGoodsImagesServer interface {
	mustEmbedUnimplementedGoodsImagesServer()
}

func RegisterGoodsImagesServer(s grpc.ServiceRegistrar, srv GoodsImagesServer) {
	// If the following call pancis, it indicates UnimplementedGoodsImagesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoodsImages_ServiceDesc, srv)
}

func _GoodsImages_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsImagesGetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsImagesServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsImages_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsImagesServer).GetList(ctx, req.(*GoodsImagesGetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsImages_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsImagesCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsImagesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsImages_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsImagesServer).Create(ctx, req.(*GoodsImagesCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsImages_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsImagesDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsImagesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsImages_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsImagesServer).Delete(ctx, req.(*GoodsImagesDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoodsImages_ServiceDesc is the grpc.ServiceDesc for GoodsImages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodsImages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goods_images.v1.goods_images",
	HandlerType: (*GoodsImagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _GoodsImages_GetList_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _GoodsImages_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GoodsImages_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods_images/v1/goods_images.proto",
}
